version: '3.1'

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5435:5432
    volumes:
      - ../Dump/20240215.09.46.07.sql:/docker-entrypoint-initdb.d/database.sql
    networks:
      - databaseTunnel
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  blazorapp:
    build: ..
    ports:
      - 7890:8080
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development
      - pec_tickets=user id=postgres; password=postgres; server=db; database=postgres; port=5432;
    depends_on:
      - db 
    networks:
      - databaseTunnel
    healthcheck:
      test: curl --fail http://localhost:7890/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  blackbox:
    # https://github.com/prometheus/blackbox_exporter/releases
    image: prom/blackbox-exporter:v0.23.0
    container_name: blackbox
    restart: unless-stopped
    ports:
      - 9115:9115
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./blackbox/blackbox.yml:/etc/blackbox/blackbox.yml
    command: --config.file=/etc/blackbox/blackbox.yml
    networks:
      otel:
     
  prometheus:
    # https://github.com/prometheus/prometheus/releases
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    depends_on:
      - blackbox
    networks:
      otel:
      
  grafana:
    # https://github.com/grafana/grafana/releases
    image: grafana/grafana:9.4.7
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    user: root
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - tempo
      - loki      
    networks:
      otel:
      
  otel-collector:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/releases
    container_name: otel
    hostname: otel
    image: otel/opentelemetry-collector-contrib:0.75.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel.yml:/etc/otel-collector-config.yaml
    restart: unless-stopped
    ports:
      - 8888:8888   # Prometheus metrics exposed by the collector
      - 8889:8889   # Prometheus exporter metrics
      - 4317:4317   # OTLP gRPC receiver
      - 9200:55679  # zpages
      - 13133:13133 # Health check
    networks:
      otel:
      
networks:
  otel:
  databaseTunnel:
    driver: bridge

volumes:
  prometheus:
  grafana-data: