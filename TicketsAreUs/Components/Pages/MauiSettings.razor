@inject IOccasionService occasionService
@inject ITicketService ticketService
@inject HttpClient httpClient
@inject SyncDatabase syncData

@page "/settings"
@using RazorClassLib.Data
@using RazorClassLib.Services
@using TicketsAreUs.Data

<div class="page-container">
    <header class="header">
        <div class="header-content">
            <h1>Complete Ticket Purchase.</h1>
            <a href="/">
                <img src="../../back2.png" alt="gear" class="settingsimg" />
            </a>
        </div>
    </header>

    <main class="content">
        <div class="email-input">
            <div class="slider-container">
                <div class="label-container">
                    <label style="width:400px;">Change API:</label>
                </div>
                <div class="email-input">
                    <input class="input" type="text" placeholder="Currently Set To: @apiKey " @bind="@ApiAddress" />
                    @if (ErrorPopUp)
                    {
                        <input type="checkbox" id="failPopup" class="popup-checkbox" @bind="ErrorPopUp" />
                        <div class="popup fail">
                            <label for="failPopup" class="close-btn" @onclick="ClosePopUp">×</label>
                            <p>Cannot Set Name. Please Set To: Localhost or Azure</p>
                        </div>
                    }
                    else if (SuccessPopUp)
                    {
                        <input type="checkbox" id="successPopup" class="popup-checkbox" @bind="SuccessPopUp" />
                        <div class="popup success">
                            <label for="successPopup" class="close-btn" @onclick="ClosePopUp">×</label>
                            <p>Changed Api Succesfully.</p>
                        </div>
                    }
                </div>
                <button @onclick="() => ChangeAPI()" class="buy" style="text-decoration:none; background-color: #151515; color: #FFFCF2">Set</button>
            </div>
            <div class="slider-container">
                <div class="email-input">
                    <div class="label-container">
                        <label style="width:500px;">Change Refresh Rate:</label>
                    </div>
                    <input class="input2" type="number" min="1" placeholder="Currently Set To: @ticks seconds" @bind="ticks" />
                    @if (ErrorPopUp)
                    {
                        <input type="checkbox" id="failPopup" class="popup-checkbox" @bind="ErrorPopUp" />
                        <div class="popup fail">
                            <label for="failPopup" class="close-btn" @onclick="ClosePopUp">×</label>
                            <p>Cannot Set Name. Please Set To: Localhost or Azure</p>
                        </div>
                    }
                    else if (SuccessPopUp)
                    {
                        <input type="checkbox" id="successPopup" class="popup-checkbox" @bind="SuccessPopUp" />
                        <div class="popup success">
                            <label for="successPopup" class="close-btn" @onclick="ClosePopUp">×</label>
                            <p>Changed Api Succesfully.</p>
                        </div>
                    }
                </div>
                <button @onclick="() => ChangeTicks()" class="buy" style="text-decoration:none; background-color: #151515; color: #FFFCF2">Set</button>
            </div>
        </div>

    </main>

    <footer class="footer">
        <p>TicketsRUS by PECorp.© 2024</p>
    </footer>
</div>


<style>
    .ticket-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
    }

    .event {
        padding-bottom: 150px;
    }

    .event-details {
        font-size: 3.5rem;
    }

    label {
        display: flex;
        width: 150px;
        text-align: right;
        color: #151515;
        font-size: 3rem;
    }

    .input {
        width: 55%;
        height: 60px;
        border: 2px solid black;
        background-color: #FFFCF2;
        box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3);
        padding-top: 20px;
        font-size: 32px;
        margin-bottom: 100px;
    }

    .input2 {
        width: 55%;
        height: 60px;
        border: 2px solid black;
        background-color: #FFFCF2;
        box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3);
        padding-top: 20px;
        font-size: 32px;
        margin-bottom: 100px;
    }


    .page-container {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .header {
        background-color: #151515;
        color: #FFFCF2;
        padding: 20px;
        width: 100%;
        position: sticky;
        top: 0;
        z-index: 1000;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .settingsimg {
        width: 50px;
        height: 50px;
        margin-left: auto;
    }

    .content {
        background-color: #FFFCF2;
        flex-grow: 1;
        padding: 20px;
        display: flex;
        flex-direction: column;
        padding-left: 250px;
        padding-top: 75px;
    }

    .footer {
        background-color: #151515;
        color: #FFFCF2;
        padding: 20px;
        width: 100%;
        position: fixed;
        bottom: 0;
        left: 0;
    }

    .buy {
        width: 150px;
        height: 72px;
        text-align: center;
        color: #FFFCF2;
        border: none;
        font-size: 2.75rem;
    }

    button {
        margin-bottom: 50px;
    }

    .popup-checkbox {
        display: none;
    }

    .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border: 2px solid #151515;
        z-index: 1001;
        display: none;
        width: 350px;
    }

        .popup p {
            margin: 0;
            font-size: xx-large;
        }

        .popup label.close-btn {
            position: absolute;
            top: 35px;
            cursor: pointer;
            left: 300px;
            top: 55px;
        }

    .popup-checkbox:checked + .popup {
        display: block;
    }

    .success {
        background-color: lightgreen;
    }

    .fail {
        background-color: salmon;
    }
</style>

@code {
    public string _dbPath;
    public string DatabaseName { get; set; } = "pec_tickets.db3";

    private string api { get; set; } = "";
    private bool isOnline { get; set; } = true;
    private int ticks { get; set; }

    public string ApiAddress { get; set; }
    public string apiKey { get; set; }
    public int refreshKey { get; set; }
    public bool ErrorPopUp { get; set; } = false;
    public bool SuccessPopUp { get; set; } = false;


    private List<Ticket> MauiTickets { get; set; } = new List<Ticket>();
    private List<Occasion> MauiOccasions { get; set; } = new List<Occasion>();
    private List<Ticket> OnlineTickets { get; set; } = new List<Ticket>();
    private List<Occasion> OnlineOccasions { get; set; } = new List<Occasion>();

    protected override async Task OnInitializedAsync()
    {

        GetPreferences();
        MauiTickets = await ticketService.GetAllTickets();
        MauiOccasions = await occasionService.GetAllOccasions();

        OnlineTickets = await httpClient.GetFromJsonAsync<List<Ticket>>($"{api}/Ticket");
        OnlineOccasions = await httpClient.GetFromJsonAsync<List<Occasion>>($"{api}/Occasion");

        apiKey = Preferences.Get("API", "");
        refreshKey = Preferences.Get("refresh", 5);
        await syncData.SyncAll(OnlineTickets, OnlineOccasions, ticks);
    }

    public async Task ChangeAPI()
    {

        if (ApiAddress == "localhost" || ApiAddress == "local host")
        {

            SuccessPopUp = true;
            isOnline = true;
            Preferences.Default.Set("NetworkStatus", isOnline);
            Preferences.Default.Set("API", "https://localhost:7257");
            await ticketService.DropTables();
            await occasionService.DropTables();
        }
        else if (ApiAddress == "azure" || ApiAddress == "Azure")
        {
            SuccessPopUp = true;
            isOnline = true;
            Preferences.Default.Set("NetworkStatus", isOnline);
            Preferences.Default.Set("API", "https://ticketsareus.azurewebsites.net");
            await ticketService.DropTables();
            await occasionService.DropTables();

        }
        else
        {
            ErrorPopUp = true;
        }
        await ticketService.DropTables();
        await occasionService.DropTables();
        return;
    }

    public void GetPreferences()
    {

        api = Preferences.Default.Get("API", "");
        if (api == "https://localhost:7257" || api == "")
        {
            api = Preferences.Default.Get("API", "https://localhost:7257");
            Preferences.Default.Set("NetworkStatus", isOnline);
            ticks = Preferences.Default.Get("refresh", 5);
        }
        else
        {
            api = Preferences.Default.Get("API", "https://ticketsareus.azurewebsites.net");
            Preferences.Default.Set("NetworkStatus", isOnline);
            ticks = Preferences.Default.Get("refresh", 5);
        }
    }
    public void ChangeTicks()
    {
        Preferences.Default.Set("refresh", ticks);
    }
    public void ClosePopUp()
    {
        ErrorPopUp = false;
        SuccessPopUp = false;
    }
}