@inject IOccasionService occasionService
@inject ITicketService ticketService
@inject HttpClient httpClient
@inject SyncDatabase syncData

@page "/scan/{OccasionId:int}"
@using RazorClassLib.Data
@using RazorClassLib.Request
@using RazorClassLib.Services
@using TicketsAreUs.Data
@using TicketsAreUs.Exceptions
@using TicketsAreUs.Maui
@using ZXing.Net.Maui

<div class="page-container">
    <header class="header">
        <div class="header-content">
            <h1>Scan.</h1>
            <a href="/">
                <img src="../../back2.png" alt="gear" class="settingsimg" />
            </a>
        </div>
    </header>

    <main class="content">
        <p>Scan Tickets Here for @currentOccasion.OccasionName</p>
        <button @onclick="DoScanAsync">Scan</button>
        <br />

        @if (EventSuccess)
        {
            <input type="checkbox" id="successPopup" class="popup-checkbox" @bind="EventSuccess" />
            <div class="popup success">
                <label for="successPopup" class="close-btn" @onclick="ClosePopUp">×</label>
                <p>Ticket Successfully Scanned.</p>
            </div>
        }
        @if (EventFail)
        {

            <input type="checkbox" id="failPopup" class="popup-checkbox" @bind="EventFail" />
            <div class="popup fail">
                <label for="failPopup" class="close-btn" @onclick="ClosePopUp">×</label>
                <p>Ticket Already Used.</p>
            </div>
        }
        <p>Scan Result: @scanResultLabel</p>
    </main>

    <footer class="footer">
        <p>TicketsRUS by PECorp.© 2024</p>
    </footer>
</div>

<style>
    .ticket-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
    }

    .ticket {
        width: 100%;
        height: 200px;
        border: 2px solid black;
        box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3);
        margin-bottom: 20px;
    }

    .page-container {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .header {
        background-color: #151515;
        color: #FFFCF2;
        padding: 20px;
        width: 100%;
        position: sticky;
        top: 0;
        z-index: 1000;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .settingsimg {
        width: 50px;
        height: 50px;
        margin-left: auto;
    }

    .content {
        background-color: #FFFCF2;
        flex-grow: 1;
        padding: 20px;
        display: flex;
        justify-content: center;
        flex-direction: column;
    }

    .footer {
        background-color: #151515;
        color: #FFFCF2;
        padding: 20px;
        width: 100%;
        position: fixed;
        bottom: 0;
        left: 0;
    }

    .popup-checkbox {
        display: none;
    }

    .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border: 2px solid #151515;
        z-index: 1001;
        display: none;
        width: 300px;
        height: 200px;
    }

        .popup p {
            margin: 0;
            font-size: xx-large;
        }

        .popup label.close-btn {
            position: absolute;
            top: 35px;
            right: 20px;
            cursor: pointer;
        }

    .popup-checkbox:checked + .popup {
        display: block;
    }

    .success {
        background-color: lightgreen;
    }

    .fail {
        background-color: salmon;
    }
</style>

@code {
    [Parameter]
    public int OccasionId { get; set; }
    public Occasion currentOccasion { get; set; } = new();

    public bool EventSuccess { get; set; } = false;
    public bool EventFail { get; set; } = false;

    private string scanResultLabel;
    private Guid scanGuid = Guid.NewGuid();

    private string api { get; set; } = "";
    private bool isOnline { get; set; } = true;
    private int ticks { get; set; }

    private List<Ticket> MauiTickets { get; set; } = new List<Ticket>();
    private List<Occasion> MauiOccasions { get; set; } = new List<Occasion>();
    private List<Ticket> OnlineTickets { get; set; } = new List<Ticket>();
    private List<Occasion> OnlineOccasions { get; set; } = new List<Occasion>();

    protected override async Task OnInitializedAsync()
    {
        GetPreferences();
        MauiTickets = await ticketService.GetAllTickets();
        MauiOccasions = await occasionService.GetAllOccasions();

        OnlineTickets = await httpClient.GetFromJsonAsync<List<Ticket>>($"{api}/Ticket");
        OnlineOccasions = await httpClient.GetFromJsonAsync<List<Occasion>>($"{api}/Occasion");

        currentOccasion = await occasionService.GetOccasion(OccasionId);

        await syncData.SyncAll(OnlineTickets, OnlineOccasions, ticks);
    }

    public async Task DoScanAsync()
    {
        var scanResults = await GetScanResultsAsync();
        scanGuid = new Guid(scanResults.Value);
        var barcode = scanResults;
        if (barcode != null)
            scanResultLabel = $"Barcodes: {barcode.Format} -> {barcode.Value}";

        try
        {
            await CheckTicket();
            // Have it put the pop-up saying it was succesful and let the person in
        }
        catch
        {
            // Have it put the pop-up saying it couldn't scan because it was already used
        }

    }

    public async Task<BarcodeResult> GetScanResultsAsync()
    {
        var cameraPage = new CameraPage();

        await Application.Current.MainPage.Navigation.PushModalAsync(cameraPage);

        var results = await cameraPage.WaitForResultAsync();

        await Application.Current.MainPage.Navigation.PopModalAsync();

        return results;
    }

    public async Task CheckTicket()
    {
        var ticket = await ticketService.GetTicketId(scanGuid);

        if (ticket.OccasionId == currentOccasion.Id)
        {
            if (ticket.IsUsed == false)
            {
                EventSuccess = true;
                await ticketService.UpdateTicket(ticket.Id);
            }
            else
            {
                EventFail = true;
                throw new TicketAlreadyScannedException($"The ticket with the GUID {ticket.Guid} has already been scanned");
            }
        }
        else
        {
            EventFail = true;
            throw new OccasionNotCorrectException($"The occasion with the Id of {currentOccasion.Id} is not what we are currently serving");
        }
    }

    public void GetPreferences()
    {
        api = Preferences.Default.Get("API", "");
        if (api == "https://localhost:7257")
        {
            api = Preferences.Default.Get("API", "https://localhost:7257");
            Preferences.Default.Set("NetworkStatus", isOnline);
            ticks = Preferences.Default.Get("refresh", 5);
        }
        else
        {
            api = Preferences.Default.Get("API", "https://ticketsareus.azurewebsites.net/");
            Preferences.Default.Set("NetworkStatus", isOnline);
            ticks = Preferences.Default.Get("refresh", 5);
        }
    }
    public void ClosePopUp()
    {
        EventSuccess = false;
        EventFail = false;
    }
}